%!PS-Adobe-3.0
%%Title: kdarbre.hs
%%For: YInghao Xu
%%Creator: a2ps version 4.14
%%CreationDate: Tue Nov 24 11:20:00 2015
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 0.000000 def
/fnfs 11 def
/bfs 8.000000 def
/cw 4.800000 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 165.400000 mul
def
/ph
   533.600000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
(exampleSet :: Kd2nTree Point3d) C n
(exampleSet =) p n
(  ) S
(let) K
( a = Node \(Point3d \(1.8,1.1,-2.0\)\) ) p
([) K
(1,2) p
(]) K
( ) p
([) K
(Empty) p
(]) K n
(      b = Node \(Point3d \(1.5,8.0,1.5\)\) ) p
([) K
(1) p
(]) K
( ) p
([) K
(Empty) p
(]) K n
(      c = Node \(Point3d \(3.3,2.8,2.5\)\) ) p
([) K
(3) p
(]) K
( ) p
([) K
(Empty) p
(]) K n
(      d = Node \(Point3d \(3.1,3.8,4.8\)\) ) p
([) K
(1,3) p
(]) K
( ) p
([) K
(Empty) p
(]) K n
(      e = Node \(Point3d \(4.0,5.1,3.8\)\) ) p
([) K
(2) p
(]) K
( ) p
([) K
(Empty) p
(]) K n
(      f = Node \(Point3d \(3.5,2.8,3.1\)\) ) p
([) K
(1,2) p
(]) K
( ) p
([) K
(c,d, Empty, e) p
(]) K n
(      g = Node \(Point3d \(3.5,0.0,2.1\)\) ) p
([) K
(3) p
(]) K
( ) p
([) K
(Empty) p
(]) K n
(      h = Node \(Point3d \(3.0,-1.7,3.1\)\) ) p
([) K
(1,2,3) p
(]) K
( ) p
([) K
(Empty) p
(]) K n
(      i = Node \(Point3d \(3.0,5.1,0.0\)\) ) p
([) K
(2) p
(]) K
( ) p
([) K
(a,b) p
(]) K n
(    ) p
(in) K
( Node \(Point3d \(3.0,-1.0,2.1\)\) ) p
([) K
(1,3) p
(]) K
( ) p
([) K
(i,h,g,f) p
(]) K n
() p n
(exampleSet1 :: Kd2nTree Point3d) C n
(exampleSet1 =) p n
(  ) S
(let) K
( f = Node \(Point3d \(3.5,2.8,3.1\)\) ) p
([) K
(1,2) p
(]) K
( ) p
([) K
(Empty,Empty, Empty, Empty) p
(]) K n
(      g = Node \(Point3d \(3.5,0.0,2.1\)\) ) p
([) K
(3) p
(]) K
( ) p
([) K
(Empty, Empty) p
(]) K n
(      h = Node \(Point3d \(3.0,-1.7,3.1\)\) ) p
([) K
(1,2,3) p
(]) K
( ) p
([) K
(Empty,Empty, Empty, Empty,Empty,Empty, Empty, Empty) p
(]) K n
(      i = Node \(Point3d \(3.0,5.1,0.0\)\) ) p
([) K
(2) p
(]) K
( ) p
([) K
(Empty,Empty) p
(]) K n
(    ) p
(in) K
( Node \(Point3d \(3.0,-1.0,2.1\)\) ) p
([) K
(1,3) p
(]) K
( ) p
([) K
(i,h,g,f) p
(]) K n
() p n
(testbuild :: [\(Point3d,[Int]\)]) C n
(testbuild =) p n
(  ) S
(let) K
( a = ) p
([) K
(\(Point3d \(3.0,-1.0,2.1\),) p
([) K
(1,3) p
(]) K
(\), \(Point3d \(3.5,2.8,3.1\),) p
([) K
(1,2) p
(]) K
(\), \(Point3d \(3.5,0.0,2.1\),) p
([) K
(3) p
(]) K
(\)) p
(]) K n
(      b = ) p
([) K
(\(Point3d \(3.0,-1.7,3.1\),) p
([) K
(1,2,3) p
(]) K
(\), \(Point3d \(3.0,5.1,0.0\),) p
([) K
(2) p
(]) K
(\), \(Point3d \(1.5,8.0,1.5\),) p
([) K
(1) p
(]) K
(\)) p
(]) K n
(      c = ) p
([) K
(\(Point3d \(3.3,2.8,2.5\),) p
([) K
(3) p
(]) K
(\), \(Point3d \(4.0,5.1,3.8\),) p
([) K
(2) p
(]) K
(\), \(Point3d \(3.1,3.8,4.8\),) p
([) K
(1,3) p
(]) K
(\), \(Point3d \(1.8,1.1,-2.0\),) p
([) K
(1,2) p
(]) K
(\)) p
(]) K n
(    ) p
(in) K
( a++b++c) p n
() N
(testbuild1 :: [\(Point3d,[Int]\)]) C n
(testbuild1 = ) p
([) K
(\(Point3d \(3.0,-1.0,2.1\),) p
([) K
(1,3) p
(]) K
(\), \(Point3d \(3.5,2.8,3.1\),) p
([) K
(1,2) p
(]) K
(\), \(Point3d \(3.5,0.0,2.1\),) p
([) K
(3) p
(]) K
(\)) p
(]) K n
() p n
(testbuildini :: [\([Double],[Int]\)]) C n
(testbuildini =) p n
(  ) S
(let) K
( a = ) p
([) K
(\() p
([) K
(3.0,-1.0,2.1) p
(]) K
(,) p
([) K
(1,3) p
(]) K
(\), \() p
([) K
(3.5,2.8,3.1) p
(]) K
(,) p
([) K
(1,2) p
(]) K
(\), \() p
([) K
(3.5,0.0,2.1) p
(]) K
(,) p
([) K
(3) p
(]) K
(\)) p
(]) K n
(      b = ) p
([) K
(\() p
([) K
(3.0,-1.7,3.1) p
(]) K
(,) p
([) K
(1,2,3) p
(]) K
(\), \() p
([) K
(3.0,5.1,0.0) p
(]) K
(,) p
([) K
(2) p
(]) K
(\), \() p
([) K
(1.5,8.0,1.5) p
(]) K
(,) p
([) K
(1) p
(]) K
(\)) p
(]) K n
(      c = ) p
([) K
(\() p
([) K
(3.3,2.8,2.5) p
(]) K
(,) p
([) K
(3) p
(]) K
(\), \() p
([) K
(4.0,5.1,3.8) p
(]) K
(,) p
([) K
(2) p
(]) K
(\), \() p
([) K
(3.1,3.8,4.8) p
(]) K
(,) p
([) K
(1,3) p
(]) K
(\), \() p
([) K
(1.8,1.1,-2.0) p
(]) K
(,) p
([) K
(1,2) p
(]) K
(\)) p
(]) K n
(    ) p
(in) K
( a++b++c) p n
() N
(testbuildini1 :: [\([Double],[Int]\)]) C n
(testbuildini1 = ) p
([) K
(\() p
([) K
(3.0,-1.0,2.1) p
(]) K
(,) p
([) K
(1,3) p
(]) K
(\), \() p
([) K
(3.5,2.8,3.1) p
(]) K
(,) p
([) K
(1,2) p
(]) K
(\), \() p
([) K
(3.5,0.0,2.1) p
(]) K
(,) p
([) K
(3) p
(]) K
(\)) p
(]) K n
() p n
(tree = build testbuild) N
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(class) K
( Point p ) p
(where) K n
(  sel ) p
(::) K
( Int ) p
(->) K
( p ) p
(->) K
( Double) p n
(  dim ) S
(::) K
( p ) p
(->) K
( Int) p n
(  child ) S
(::) K
( p ) p
(->) K
( p ) p
(->) K
( ) p
([) K
(Int) p
(]) K
( ) p
(->) K
( Int) p n
(  dist ) S
(::) K
( p ) p
(->) K
( p ) p
(->) K
( Double) p n
(  list2Point ) S
(::) K
( ) p
([) K
(Double) p
(]) K
( ) p
(->) K
( p) p n
(  ptrans ) S
(::) K
( ) p
([) K
(Double) p
(]) K
( ) p
(->) K
( p ) p
(->) K
( p) p n
(  pscale ) S
(::) K
( Double ) p
(->) K
( p ) p
(->) K
( p) p n
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(data) K
( Point3d  = Point3d \(Double,Double,Double\) ) p
(deriving) K
( \(Eq, Ord\)) p n
() N
(instance) K
( Point Point3d ) p
(where) K n
(  sel 1 \(Point3d \(a,_,_\)\)  = a) p n
(  sel 2 \(Point3d \(_,b,_\)\)  = b) N
(  sel 3 \(Point3d \(_,_,c\)\)  = c) N
() N
(  dim k = 3) N
() N
(  child _ _ ) S
([]) K
( = 0;) p n
grestore
(titol) rhead
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
(  child q@\(Point3d \(a,b,c\)\) w@\(Point3d \(d,e,f\)\) l@\(x) p
(:) K
(xs\)) p n
(    | \(sel x q\) > \(sel x w\) = 2^\(\(length l\)-1\) + child q w xs) N
(    | otherwise  = child q w xs) N
() N
(  dist \(Point3d \(a,b,c\)\) \(Point3d \(d,e,f\)\) = sqrt \(\(d-a\)^2 + \(e-b\)^2 + \(f-c\)^2\)) N
() N
(  list2Point ) S
([) K
(a,b,c) p
(]) K
( = Point3d \(a,b,c\)) p n
() N
(  ptrans ) S
([) K
(dx,dy,dz) p
(]) K
( \(Point3d \(x,y,z\)\) = Point3d \(x+dx,y+dy,z+dz\)) p n
() N
(  pscale n \(Point3d \(x,y,z\)\) = Point3d \(x*n,y*n,z*n\)) N
() N
(instance) K
( Show Point3d ) p
(where) K n
(  show \(Point3d \(a,b,c\)\) = ") p
(\() str
("++\(show a\)++") p
(,) str
("++\(show b\)++") p
(,) str
("++\(show c\)++") p
(\)) str
(") p n
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(data) K
( Kd2nTree p = Node p ) p
([) K
(Int) p
(]) K
( ) p
([) K
(Kd2nTree p) p
(]) K
( | Empty) p n
() N
(instance) K
( Eq a => Eq \(Kd2nTree a\) ) p
(where) K n
(  Empty == Empty = True) p n
(  Empty == _     = False) N
(  _     == Empty = False) N
(  \(Node q w e\) == \(Node a s d\) = q==a && w==s && e==d ) S
(--TODO: Check if the comparision between list of custom data works) c n
() p n
() N
(showFills :: \(Show p\) => String -> Int -> [Kd2nTree p] -> String) C n
(showFills _ pos ) p
([]) K
( = "") p n
(showFills p pos \(Empty) S
(:) K
(xs\) = showFills p \(pos+1\) xs) p n
(showFills ") S
(*) str
(" pos \(x) p
(:) K
(xs\) = showNode ") p
(*) str
(" pos x ++ showFills ") p
(*) str
(" \(pos+1\) xs) p n
(showFills p pos \(x) S
(:) K
(xs\) = \(showNode \(p++") p
(     ) str
("\) pos x\) ++ showFills p \(pos+1\) xs) p n
() N
() N
(showNode :: \(Show p\) => String -> Int -> Kd2nTree p -> String) C n
(showNode _ _ Empty = show "") p n
(showNode ") S
(*) str
(" pos \(Node a w list\) = ") p
(\\n) str
(" ++ ") p
( <) str
(" ++ \(show pos\) ++ ") p
(>) str
(" ++ ") p
( ) str
(" ++ show a ++ ") p
( ) str
(" ++ show w ++ showFills "" 0 list) p n
(showNode p pos \(Node a w list\) = ") S
(\\n) str
(" ++ p ++ ") p
( <) str
(" ++ \(show pos\) ++ ") p
(>) str
(" ++ ") p
( ) str
(" ++ show a ++ ") p
( ) str
(" ++ show w ++ showFills p 0 list) p n
() N
() N
(instance) K
( \(Show p\) => Show \(Kd2nTree p\) ) p
(where) K n
(  show Empty = show "") p n
(  show \(Node a w list\) = show a ++ ") S
( ) str
(" ++ show w ++ showFills ") p
(*) str
(" 0 list) p n
() N
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(insert :: \(Point punt\) => Kd2nTree punt -> punt -> [Int] -> Kd2nTree punt) C n
(insert Empty p comp = Node p comp \(take \(2^\(length comp\)\) \(iterate id Empty\)\)) p n
(insert \(Node a w list\) p comp = Node a w \(l++) S
([) K
(nod) p
(]) K
(++\(tail r\)\)) p n
(  ) S
(where) K
( pos = \(child p a w\)) p n
(        \(l,r\) = splitAt pos list) N
(        nod = insert \(head r\) p comp) N
() N
(build :: \(Point punt\) => [\(punt,[Int]\)] -> Kd2nTree punt) C n
(build list =  foldl \(\\a \(p,comp\) ) p
(->) K
( insert a p comp\) Empty list) p n
() N
(buildIni :: \(Point punt\) => [\([Double],[Int]\)] -> Kd2nTree punt) C n
(buildIni list = foldl \(\\a \(p,comp\) ) p
(->) K
( insert a \(list2Point p\) comp\) Empty list) p n
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(point2Double :: \(Point p\) => p -> Int -> [Double]) C n
(point2Double p 1 = ) p
([) K
(sel 1 p) p
(]) K n
(point2Double p count = \(point2Double p \(count-1\)\)++) p
([) K
(\(sel count p\)) p
(]) K n
() p n
(get_all :: \(Point p\) => Kd2nTree p -> [\([Double],[Int]\)]) C n
grestore
(titol) rhead
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
(get_all Empty = ) p
([]) K n
(get_all \(Node a comp xs\) = \(point2Double a \(dim a\),comp\) ) p
(:) K
( foldr \(\\q b) p
(->) K
(\(get_all q\) ++ b\) ) p
([]) K
( xs) p n
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(remove :: \(Eq p, Point p\) => Kd2nTree p -> p -> Kd2nTree p) C n
(remove \(Node a w list\) p) p n
(  | a /= p = Node a w \(l++) S
([) K
(remove h p) p
(]) K
(++t\)) p n
(  | otherwise = buildIni \(foldr \(\\q b) S
(->) K
(\(get_all q\) ++ b\) ) p
([]) K
( list\)) p n
(  ) S
(where) K
( pos = \(child p a w\)) p n
(        \(l,r\) = splitAt pos list) N
(        \() S
([) K
(h) p
(]) K
(,t\) = splitAt 1 r) p n
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(contains :: \(Eq p, Point p\) => Kd2nTree p -> p -> Bool) C n
(contains Empty _ = False) p n
(contains \(Node a w list\) p) N
(  | a /= p = contains \(list !! \(child p a w\)\) p) N
(  | otherwise = True) N
() N
(-------------------------------------------------------------------------------------------) c n
() p n
(minp :: \(Point p\) => p -> p -> p -> p) C n
(minp po pa pb) p n
(  | \(dist po pa\) < \(dist po pb\) = pa) N
(  | otherwise = pb) N
() N
({-) c n
(nearestAux :: \(Point p\) => Kd2nTree p -> p -> p -> p) N
(nearestAux Empty aux orig = aux) N
(nearestAux \(Node a comp fills\) aux orig = foldr \(\\x b -> minp orig b \(nearestAux x a orig\)\) a fills) N
() N
(nearest :: \(Point p\) => Kd2nTree p -> p -> p) N
(nearest x@\(Node a comp fills\) p = nearestAux x a p) N
(-}) N
() p n
(nearest :: \(Point p, Eq p\) => Kd2nTree p -> p -> p) C n
(nearest x@\(Node a comp fills\) p = foldr \(\\x b ) p
(->) K
( minp p b \(nearest x p\)\) a \(filter \(\\x ) p
(->) K
( x /= Empty\) fills\)) p n
() N
(-------------------------------------------------------------------------------------------) c n
() p n
({-) c n
(minFills :: \(Point p\) => p -> p -> p -> Int -> [Int]) N
(minFills p1 p2 pc comps) N
(  | all \(\\\(x,y,z\) -> x <= y && y <= z\) \(zip3 pd1 pdc pd2\) = [0..comps]) N
(  | all \(\\\(x,y\) -> x < y\) \(zip pdc pd1\) = [0]) N
(  | otherwise = [comps]) N
(  where pd1 = point2Double p1 \(dim p1\)) N
(        pd2 = point2Double p2 \(dim p2\)) N
(        pdc = point2Double pc \(dim pc\)) N
() N
(allInterval :: \(Point p\) => Kd2nTree p -> p -> p -> [p]) N
(allInterval Empty _ _ = []) N
(allInterval \(Node a comp list\) p1 p2) N
(  | xs /= [] = a : foldr \(\\q b -> \(allInterval q p1 p2\) ++ b\) [] list) N
(  | otherwise = allInterval \(list !! x\) p1 p2) N
(  where \(x:xs\) = minFills p1 p2 a di) N
(        di = 2^\(length comp\)-1) N
(-}) N
() p n
(allInterval :: \(Ord p, Point p\) => Kd2nTree p -> p -> p -> [p]) C n
(allInterval Empty _ _ = ) p
([]) K n
(allInterval \(Node a comp list\) p1 p2) p n
(  | p1 <= a && a <= p2 = a ) S
(:) K
( foldr \(\\q b ) p
(->) K
( \(allInterval q p1 p2\) ++ b\) ) p
([]) K
( list) p n
(  | otherwise = foldr \(\\q b ) S
(->) K
( \(allInterval q p1 p2\) ++ b\) ) p
([]) K
( list) p n
grestore
(titol) rhead
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
() N
(-------------------------------------------------------------------------------------------) c n
(--foldr :: \(a -> b -> b\) -> b -> [a] -> b) N
(kdmap :: \(p -> q\) -> Kd2nTree p -> Kd2nTree q) C n
(kdmap _ Empty = Empty) p n
(kdmap f \(Node a w list\) = Node \(f a\) w \(foldr \(\\x b ) S
(->) K
( \(kdmap f x\)) p
(:) K
(b\) ) p
([]) K
( list\)) p n
() N
(translation :: \(Point p\) => [Double] -> Kd2nTree p -> Kd2nTree p) C n
(translation ct x = kdmap \(ptrans ct\) x) p n
() N
(scale :: \(Point p\) => Double -> Kd2nTree p -> Kd2nTree p) C n
(scale n x = kdmap \(pscale n\) x) p n
grestore
(titol) rhead
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
